/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.pluginv2.AppInstanceSettings', null, global);
goog.exportSymbol('proto.pluginv2.CallResourceRequest', null, global);
goog.exportSymbol('proto.pluginv2.CallResourceResponse', null, global);
goog.exportSymbol('proto.pluginv2.CheckHealthRequest', null, global);
goog.exportSymbol('proto.pluginv2.CheckHealthResponse', null, global);
goog.exportSymbol('proto.pluginv2.CheckHealthResponse.HealthStatus', null, global);
goog.exportSymbol('proto.pluginv2.CollectMetricsRequest', null, global);
goog.exportSymbol('proto.pluginv2.CollectMetricsResponse', null, global);
goog.exportSymbol('proto.pluginv2.CollectMetricsResponse.Payload', null, global);
goog.exportSymbol('proto.pluginv2.DataQuery', null, global);
goog.exportSymbol('proto.pluginv2.DataResponse', null, global);
goog.exportSymbol('proto.pluginv2.DataSourceInstanceSettings', null, global);
goog.exportSymbol('proto.pluginv2.PluginContext', null, global);
goog.exportSymbol('proto.pluginv2.QueryDataRequest', null, global);
goog.exportSymbol('proto.pluginv2.QueryDataResponse', null, global);
goog.exportSymbol('proto.pluginv2.StringList', null, global);
goog.exportSymbol('proto.pluginv2.TimeRange', null, global);
goog.exportSymbol('proto.pluginv2.User', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pluginv2.AppInstanceSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pluginv2.AppInstanceSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pluginv2.AppInstanceSettings.displayName = 'proto.pluginv2.AppInstanceSettings';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pluginv2.AppInstanceSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.pluginv2.AppInstanceSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pluginv2.AppInstanceSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pluginv2.AppInstanceSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    jsondata: msg.getJsondata_asB64(),
    decryptedsecurejsondataMap: (f = msg.getDecryptedsecurejsondataMap()) ? f.toObject(includeInstance, undefined) : [],
    lastupdatedms: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pluginv2.AppInstanceSettings}
 */
proto.pluginv2.AppInstanceSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pluginv2.AppInstanceSettings;
  return proto.pluginv2.AppInstanceSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pluginv2.AppInstanceSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pluginv2.AppInstanceSettings}
 */
proto.pluginv2.AppInstanceSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setJsondata(value);
      break;
    case 4:
      var value = msg.getDecryptedsecurejsondataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastupdatedms(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pluginv2.AppInstanceSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pluginv2.AppInstanceSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pluginv2.AppInstanceSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pluginv2.AppInstanceSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJsondata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getDecryptedsecurejsondataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getLastupdatedms();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
};


/**
 * optional bytes jsonData = 3;
 * @return {!(string|Uint8Array)}
 */
proto.pluginv2.AppInstanceSettings.prototype.getJsondata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes jsonData = 3;
 * This is a type-conversion wrapper around `getJsondata()`
 * @return {string}
 */
proto.pluginv2.AppInstanceSettings.prototype.getJsondata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getJsondata()));
};


/**
 * optional bytes jsonData = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getJsondata()`
 * @return {!Uint8Array}
 */
proto.pluginv2.AppInstanceSettings.prototype.getJsondata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getJsondata()));
};


/** @param {!(string|Uint8Array)} value */
proto.pluginv2.AppInstanceSettings.prototype.setJsondata = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * map<string, string> decryptedSecureJsonData = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.pluginv2.AppInstanceSettings.prototype.getDecryptedsecurejsondataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


proto.pluginv2.AppInstanceSettings.prototype.clearDecryptedsecurejsondataMap = function() {
  this.getDecryptedsecurejsondataMap().clear();
};


/**
 * optional int64 lastUpdatedMS = 5;
 * @return {number}
 */
proto.pluginv2.AppInstanceSettings.prototype.getLastupdatedms = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.pluginv2.AppInstanceSettings.prototype.setLastupdatedms = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pluginv2.DataSourceInstanceSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pluginv2.DataSourceInstanceSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pluginv2.DataSourceInstanceSettings.displayName = 'proto.pluginv2.DataSourceInstanceSettings';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pluginv2.DataSourceInstanceSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.pluginv2.DataSourceInstanceSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pluginv2.DataSourceInstanceSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pluginv2.DataSourceInstanceSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    url: jspb.Message.getFieldWithDefault(msg, 3, ""),
    user: jspb.Message.getFieldWithDefault(msg, 4, ""),
    database: jspb.Message.getFieldWithDefault(msg, 5, ""),
    basicauthenabled: jspb.Message.getFieldWithDefault(msg, 6, false),
    basicauthuser: jspb.Message.getFieldWithDefault(msg, 7, ""),
    jsondata: msg.getJsondata_asB64(),
    decryptedsecurejsondataMap: (f = msg.getDecryptedsecurejsondataMap()) ? f.toObject(includeInstance, undefined) : [],
    lastupdatedms: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pluginv2.DataSourceInstanceSettings}
 */
proto.pluginv2.DataSourceInstanceSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pluginv2.DataSourceInstanceSettings;
  return proto.pluginv2.DataSourceInstanceSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pluginv2.DataSourceInstanceSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pluginv2.DataSourceInstanceSettings}
 */
proto.pluginv2.DataSourceInstanceSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUser(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDatabase(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBasicauthenabled(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setBasicauthuser(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setJsondata(value);
      break;
    case 9:
      var value = msg.getDecryptedsecurejsondataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastupdatedms(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pluginv2.DataSourceInstanceSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pluginv2.DataSourceInstanceSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pluginv2.DataSourceInstanceSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pluginv2.DataSourceInstanceSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUser();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDatabase();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getBasicauthenabled();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getBasicauthuser();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getJsondata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = message.getDecryptedsecurejsondataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(9, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getLastupdatedms();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.pluginv2.DataSourceInstanceSettings.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pluginv2.DataSourceInstanceSettings.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.pluginv2.DataSourceInstanceSettings.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.pluginv2.DataSourceInstanceSettings.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string url = 3;
 * @return {string}
 */
proto.pluginv2.DataSourceInstanceSettings.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.pluginv2.DataSourceInstanceSettings.prototype.setUrl = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string user = 4;
 * @return {string}
 */
proto.pluginv2.DataSourceInstanceSettings.prototype.getUser = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.pluginv2.DataSourceInstanceSettings.prototype.setUser = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string database = 5;
 * @return {string}
 */
proto.pluginv2.DataSourceInstanceSettings.prototype.getDatabase = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.pluginv2.DataSourceInstanceSettings.prototype.setDatabase = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bool basicAuthEnabled = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.pluginv2.DataSourceInstanceSettings.prototype.getBasicauthenabled = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.pluginv2.DataSourceInstanceSettings.prototype.setBasicauthenabled = function(value) {
  jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional string basicAuthUser = 7;
 * @return {string}
 */
proto.pluginv2.DataSourceInstanceSettings.prototype.getBasicauthuser = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.pluginv2.DataSourceInstanceSettings.prototype.setBasicauthuser = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional bytes jsonData = 8;
 * @return {!(string|Uint8Array)}
 */
proto.pluginv2.DataSourceInstanceSettings.prototype.getJsondata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes jsonData = 8;
 * This is a type-conversion wrapper around `getJsondata()`
 * @return {string}
 */
proto.pluginv2.DataSourceInstanceSettings.prototype.getJsondata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getJsondata()));
};


/**
 * optional bytes jsonData = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getJsondata()`
 * @return {!Uint8Array}
 */
proto.pluginv2.DataSourceInstanceSettings.prototype.getJsondata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getJsondata()));
};


/** @param {!(string|Uint8Array)} value */
proto.pluginv2.DataSourceInstanceSettings.prototype.setJsondata = function(value) {
  jspb.Message.setProto3BytesField(this, 8, value);
};


/**
 * map<string, string> decryptedSecureJsonData = 9;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.pluginv2.DataSourceInstanceSettings.prototype.getDecryptedsecurejsondataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 9, opt_noLazyCreate,
      null));
};


proto.pluginv2.DataSourceInstanceSettings.prototype.clearDecryptedsecurejsondataMap = function() {
  this.getDecryptedsecurejsondataMap().clear();
};


/**
 * optional int64 lastUpdatedMS = 10;
 * @return {number}
 */
proto.pluginv2.DataSourceInstanceSettings.prototype.getLastupdatedms = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.pluginv2.DataSourceInstanceSettings.prototype.setLastupdatedms = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pluginv2.User = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pluginv2.User, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pluginv2.User.displayName = 'proto.pluginv2.User';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pluginv2.User.prototype.toObject = function(opt_includeInstance) {
  return proto.pluginv2.User.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pluginv2.User} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pluginv2.User.toObject = function(includeInstance, msg) {
  var f, obj = {
    login: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    email: jspb.Message.getFieldWithDefault(msg, 3, ""),
    role: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pluginv2.User}
 */
proto.pluginv2.User.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pluginv2.User;
  return proto.pluginv2.User.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pluginv2.User} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pluginv2.User}
 */
proto.pluginv2.User.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogin(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRole(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pluginv2.User.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pluginv2.User.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pluginv2.User} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pluginv2.User.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLogin();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRole();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string login = 1;
 * @return {string}
 */
proto.pluginv2.User.prototype.getLogin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.pluginv2.User.prototype.setLogin = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.pluginv2.User.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.pluginv2.User.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string email = 3;
 * @return {string}
 */
proto.pluginv2.User.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.pluginv2.User.prototype.setEmail = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string role = 4;
 * @return {string}
 */
proto.pluginv2.User.prototype.getRole = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.pluginv2.User.prototype.setRole = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pluginv2.PluginContext = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pluginv2.PluginContext, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pluginv2.PluginContext.displayName = 'proto.pluginv2.PluginContext';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pluginv2.PluginContext.prototype.toObject = function(opt_includeInstance) {
  return proto.pluginv2.PluginContext.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pluginv2.PluginContext} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pluginv2.PluginContext.toObject = function(includeInstance, msg) {
  var f, obj = {
    orgid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pluginid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    user: (f = msg.getUser()) && proto.pluginv2.User.toObject(includeInstance, f),
    appinstancesettings: (f = msg.getAppinstancesettings()) && proto.pluginv2.AppInstanceSettings.toObject(includeInstance, f),
    datasourceinstancesettings: (f = msg.getDatasourceinstancesettings()) && proto.pluginv2.DataSourceInstanceSettings.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pluginv2.PluginContext}
 */
proto.pluginv2.PluginContext.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pluginv2.PluginContext;
  return proto.pluginv2.PluginContext.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pluginv2.PluginContext} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pluginv2.PluginContext}
 */
proto.pluginv2.PluginContext.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOrgid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPluginid(value);
      break;
    case 3:
      var value = new proto.pluginv2.User;
      reader.readMessage(value,proto.pluginv2.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 4:
      var value = new proto.pluginv2.AppInstanceSettings;
      reader.readMessage(value,proto.pluginv2.AppInstanceSettings.deserializeBinaryFromReader);
      msg.setAppinstancesettings(value);
      break;
    case 5:
      var value = new proto.pluginv2.DataSourceInstanceSettings;
      reader.readMessage(value,proto.pluginv2.DataSourceInstanceSettings.deserializeBinaryFromReader);
      msg.setDatasourceinstancesettings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pluginv2.PluginContext.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pluginv2.PluginContext.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pluginv2.PluginContext} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pluginv2.PluginContext.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrgid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getPluginid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.pluginv2.User.serializeBinaryToWriter
    );
  }
  f = message.getAppinstancesettings();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.pluginv2.AppInstanceSettings.serializeBinaryToWriter
    );
  }
  f = message.getDatasourceinstancesettings();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.pluginv2.DataSourceInstanceSettings.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 orgId = 1;
 * @return {number}
 */
proto.pluginv2.PluginContext.prototype.getOrgid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pluginv2.PluginContext.prototype.setOrgid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string pluginId = 2;
 * @return {string}
 */
proto.pluginv2.PluginContext.prototype.getPluginid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.pluginv2.PluginContext.prototype.setPluginid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional User user = 3;
 * @return {?proto.pluginv2.User}
 */
proto.pluginv2.PluginContext.prototype.getUser = function() {
  return /** @type{?proto.pluginv2.User} */ (
    jspb.Message.getWrapperField(this, proto.pluginv2.User, 3));
};


/** @param {?proto.pluginv2.User|undefined} value */
proto.pluginv2.PluginContext.prototype.setUser = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.pluginv2.PluginContext.prototype.clearUser = function() {
  this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pluginv2.PluginContext.prototype.hasUser = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional AppInstanceSettings appInstanceSettings = 4;
 * @return {?proto.pluginv2.AppInstanceSettings}
 */
proto.pluginv2.PluginContext.prototype.getAppinstancesettings = function() {
  return /** @type{?proto.pluginv2.AppInstanceSettings} */ (
    jspb.Message.getWrapperField(this, proto.pluginv2.AppInstanceSettings, 4));
};


/** @param {?proto.pluginv2.AppInstanceSettings|undefined} value */
proto.pluginv2.PluginContext.prototype.setAppinstancesettings = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.pluginv2.PluginContext.prototype.clearAppinstancesettings = function() {
  this.setAppinstancesettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pluginv2.PluginContext.prototype.hasAppinstancesettings = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional DataSourceInstanceSettings dataSourceInstanceSettings = 5;
 * @return {?proto.pluginv2.DataSourceInstanceSettings}
 */
proto.pluginv2.PluginContext.prototype.getDatasourceinstancesettings = function() {
  return /** @type{?proto.pluginv2.DataSourceInstanceSettings} */ (
    jspb.Message.getWrapperField(this, proto.pluginv2.DataSourceInstanceSettings, 5));
};


/** @param {?proto.pluginv2.DataSourceInstanceSettings|undefined} value */
proto.pluginv2.PluginContext.prototype.setDatasourceinstancesettings = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.pluginv2.PluginContext.prototype.clearDatasourceinstancesettings = function() {
  this.setDatasourceinstancesettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pluginv2.PluginContext.prototype.hasDatasourceinstancesettings = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pluginv2.StringList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pluginv2.StringList.repeatedFields_, null);
};
goog.inherits(proto.pluginv2.StringList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pluginv2.StringList.displayName = 'proto.pluginv2.StringList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pluginv2.StringList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pluginv2.StringList.prototype.toObject = function(opt_includeInstance) {
  return proto.pluginv2.StringList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pluginv2.StringList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pluginv2.StringList.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pluginv2.StringList}
 */
proto.pluginv2.StringList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pluginv2.StringList;
  return proto.pluginv2.StringList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pluginv2.StringList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pluginv2.StringList}
 */
proto.pluginv2.StringList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pluginv2.StringList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pluginv2.StringList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pluginv2.StringList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pluginv2.StringList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string values = 1;
 * @return {!Array<string>}
 */
proto.pluginv2.StringList.prototype.getValuesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.pluginv2.StringList.prototype.setValuesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.pluginv2.StringList.prototype.addValues = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.pluginv2.StringList.prototype.clearValuesList = function() {
  this.setValuesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pluginv2.CallResourceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pluginv2.CallResourceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pluginv2.CallResourceRequest.displayName = 'proto.pluginv2.CallResourceRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pluginv2.CallResourceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pluginv2.CallResourceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pluginv2.CallResourceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pluginv2.CallResourceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    plugincontext: (f = msg.getPlugincontext()) && proto.pluginv2.PluginContext.toObject(includeInstance, f),
    path: jspb.Message.getFieldWithDefault(msg, 2, ""),
    method: jspb.Message.getFieldWithDefault(msg, 3, ""),
    url: jspb.Message.getFieldWithDefault(msg, 4, ""),
    headersMap: (f = msg.getHeadersMap()) ? f.toObject(includeInstance, proto.pluginv2.StringList.toObject) : [],
    body: msg.getBody_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pluginv2.CallResourceRequest}
 */
proto.pluginv2.CallResourceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pluginv2.CallResourceRequest;
  return proto.pluginv2.CallResourceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pluginv2.CallResourceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pluginv2.CallResourceRequest}
 */
proto.pluginv2.CallResourceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pluginv2.PluginContext;
      reader.readMessage(value,proto.pluginv2.PluginContext.deserializeBinaryFromReader);
      msg.setPlugincontext(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethod(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 5:
      var value = msg.getHeadersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.pluginv2.StringList.deserializeBinaryFromReader, "");
         });
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pluginv2.CallResourceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pluginv2.CallResourceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pluginv2.CallResourceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pluginv2.CallResourceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlugincontext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pluginv2.PluginContext.serializeBinaryToWriter
    );
  }
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMethod();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getHeadersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.pluginv2.StringList.serializeBinaryToWriter);
  }
  f = message.getBody_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
};


/**
 * optional PluginContext pluginContext = 1;
 * @return {?proto.pluginv2.PluginContext}
 */
proto.pluginv2.CallResourceRequest.prototype.getPlugincontext = function() {
  return /** @type{?proto.pluginv2.PluginContext} */ (
    jspb.Message.getWrapperField(this, proto.pluginv2.PluginContext, 1));
};


/** @param {?proto.pluginv2.PluginContext|undefined} value */
proto.pluginv2.CallResourceRequest.prototype.setPlugincontext = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.pluginv2.CallResourceRequest.prototype.clearPlugincontext = function() {
  this.setPlugincontext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pluginv2.CallResourceRequest.prototype.hasPlugincontext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string path = 2;
 * @return {string}
 */
proto.pluginv2.CallResourceRequest.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.pluginv2.CallResourceRequest.prototype.setPath = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string method = 3;
 * @return {string}
 */
proto.pluginv2.CallResourceRequest.prototype.getMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.pluginv2.CallResourceRequest.prototype.setMethod = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string url = 4;
 * @return {string}
 */
proto.pluginv2.CallResourceRequest.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.pluginv2.CallResourceRequest.prototype.setUrl = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * map<string, StringList> headers = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.pluginv2.StringList>}
 */
proto.pluginv2.CallResourceRequest.prototype.getHeadersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.pluginv2.StringList>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      proto.pluginv2.StringList));
};


proto.pluginv2.CallResourceRequest.prototype.clearHeadersMap = function() {
  this.getHeadersMap().clear();
};


/**
 * optional bytes body = 6;
 * @return {!(string|Uint8Array)}
 */
proto.pluginv2.CallResourceRequest.prototype.getBody = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes body = 6;
 * This is a type-conversion wrapper around `getBody()`
 * @return {string}
 */
proto.pluginv2.CallResourceRequest.prototype.getBody_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBody()));
};


/**
 * optional bytes body = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBody()`
 * @return {!Uint8Array}
 */
proto.pluginv2.CallResourceRequest.prototype.getBody_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBody()));
};


/** @param {!(string|Uint8Array)} value */
proto.pluginv2.CallResourceRequest.prototype.setBody = function(value) {
  jspb.Message.setProto3BytesField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pluginv2.CallResourceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pluginv2.CallResourceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pluginv2.CallResourceResponse.displayName = 'proto.pluginv2.CallResourceResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pluginv2.CallResourceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pluginv2.CallResourceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pluginv2.CallResourceResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pluginv2.CallResourceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    headersMap: (f = msg.getHeadersMap()) ? f.toObject(includeInstance, proto.pluginv2.StringList.toObject) : [],
    body: msg.getBody_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pluginv2.CallResourceResponse}
 */
proto.pluginv2.CallResourceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pluginv2.CallResourceResponse;
  return proto.pluginv2.CallResourceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pluginv2.CallResourceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pluginv2.CallResourceResponse}
 */
proto.pluginv2.CallResourceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    case 2:
      var value = msg.getHeadersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.pluginv2.StringList.deserializeBinaryFromReader, "");
         });
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pluginv2.CallResourceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pluginv2.CallResourceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pluginv2.CallResourceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pluginv2.CallResourceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getHeadersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.pluginv2.StringList.serializeBinaryToWriter);
  }
  f = message.getBody_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.pluginv2.CallResourceResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pluginv2.CallResourceResponse.prototype.setCode = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * map<string, StringList> headers = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.pluginv2.StringList>}
 */
proto.pluginv2.CallResourceResponse.prototype.getHeadersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.pluginv2.StringList>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.pluginv2.StringList));
};


proto.pluginv2.CallResourceResponse.prototype.clearHeadersMap = function() {
  this.getHeadersMap().clear();
};


/**
 * optional bytes body = 3;
 * @return {!(string|Uint8Array)}
 */
proto.pluginv2.CallResourceResponse.prototype.getBody = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes body = 3;
 * This is a type-conversion wrapper around `getBody()`
 * @return {string}
 */
proto.pluginv2.CallResourceResponse.prototype.getBody_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBody()));
};


/**
 * optional bytes body = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBody()`
 * @return {!Uint8Array}
 */
proto.pluginv2.CallResourceResponse.prototype.getBody_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBody()));
};


/** @param {!(string|Uint8Array)} value */
proto.pluginv2.CallResourceResponse.prototype.setBody = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pluginv2.TimeRange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pluginv2.TimeRange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pluginv2.TimeRange.displayName = 'proto.pluginv2.TimeRange';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pluginv2.TimeRange.prototype.toObject = function(opt_includeInstance) {
  return proto.pluginv2.TimeRange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pluginv2.TimeRange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pluginv2.TimeRange.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromepochms: jspb.Message.getFieldWithDefault(msg, 1, 0),
    toepochms: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pluginv2.TimeRange}
 */
proto.pluginv2.TimeRange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pluginv2.TimeRange;
  return proto.pluginv2.TimeRange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pluginv2.TimeRange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pluginv2.TimeRange}
 */
proto.pluginv2.TimeRange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFromepochms(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setToepochms(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pluginv2.TimeRange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pluginv2.TimeRange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pluginv2.TimeRange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pluginv2.TimeRange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromepochms();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getToepochms();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 fromEpochMS = 1;
 * @return {number}
 */
proto.pluginv2.TimeRange.prototype.getFromepochms = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pluginv2.TimeRange.prototype.setFromepochms = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 toEpochMS = 2;
 * @return {number}
 */
proto.pluginv2.TimeRange.prototype.getToepochms = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pluginv2.TimeRange.prototype.setToepochms = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pluginv2.DataQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pluginv2.DataQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pluginv2.DataQuery.displayName = 'proto.pluginv2.DataQuery';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pluginv2.DataQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.pluginv2.DataQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pluginv2.DataQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pluginv2.DataQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    refid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    maxdatapoints: jspb.Message.getFieldWithDefault(msg, 2, 0),
    intervalms: jspb.Message.getFieldWithDefault(msg, 3, 0),
    timerange: (f = msg.getTimerange()) && proto.pluginv2.TimeRange.toObject(includeInstance, f),
    json: msg.getJson_asB64(),
    querytype: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pluginv2.DataQuery}
 */
proto.pluginv2.DataQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pluginv2.DataQuery;
  return proto.pluginv2.DataQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pluginv2.DataQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pluginv2.DataQuery}
 */
proto.pluginv2.DataQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRefid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxdatapoints(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setIntervalms(value);
      break;
    case 4:
      var value = new proto.pluginv2.TimeRange;
      reader.readMessage(value,proto.pluginv2.TimeRange.deserializeBinaryFromReader);
      msg.setTimerange(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setJson(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuerytype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pluginv2.DataQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pluginv2.DataQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pluginv2.DataQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pluginv2.DataQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRefid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMaxdatapoints();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getIntervalms();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getTimerange();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.pluginv2.TimeRange.serializeBinaryToWriter
    );
  }
  f = message.getJson_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getQuerytype();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string refId = 1;
 * @return {string}
 */
proto.pluginv2.DataQuery.prototype.getRefid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.pluginv2.DataQuery.prototype.setRefid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 maxDataPoints = 2;
 * @return {number}
 */
proto.pluginv2.DataQuery.prototype.getMaxdatapoints = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.pluginv2.DataQuery.prototype.setMaxdatapoints = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 intervalMS = 3;
 * @return {number}
 */
proto.pluginv2.DataQuery.prototype.getIntervalms = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.pluginv2.DataQuery.prototype.setIntervalms = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional TimeRange timeRange = 4;
 * @return {?proto.pluginv2.TimeRange}
 */
proto.pluginv2.DataQuery.prototype.getTimerange = function() {
  return /** @type{?proto.pluginv2.TimeRange} */ (
    jspb.Message.getWrapperField(this, proto.pluginv2.TimeRange, 4));
};


/** @param {?proto.pluginv2.TimeRange|undefined} value */
proto.pluginv2.DataQuery.prototype.setTimerange = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.pluginv2.DataQuery.prototype.clearTimerange = function() {
  this.setTimerange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pluginv2.DataQuery.prototype.hasTimerange = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bytes json = 5;
 * @return {!(string|Uint8Array)}
 */
proto.pluginv2.DataQuery.prototype.getJson = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes json = 5;
 * This is a type-conversion wrapper around `getJson()`
 * @return {string}
 */
proto.pluginv2.DataQuery.prototype.getJson_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getJson()));
};


/**
 * optional bytes json = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getJson()`
 * @return {!Uint8Array}
 */
proto.pluginv2.DataQuery.prototype.getJson_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getJson()));
};


/** @param {!(string|Uint8Array)} value */
proto.pluginv2.DataQuery.prototype.setJson = function(value) {
  jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional string queryType = 6;
 * @return {string}
 */
proto.pluginv2.DataQuery.prototype.getQuerytype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.pluginv2.DataQuery.prototype.setQuerytype = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pluginv2.QueryDataRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pluginv2.QueryDataRequest.repeatedFields_, null);
};
goog.inherits(proto.pluginv2.QueryDataRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pluginv2.QueryDataRequest.displayName = 'proto.pluginv2.QueryDataRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pluginv2.QueryDataRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pluginv2.QueryDataRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pluginv2.QueryDataRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pluginv2.QueryDataRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pluginv2.QueryDataRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    plugincontext: (f = msg.getPlugincontext()) && proto.pluginv2.PluginContext.toObject(includeInstance, f),
    headersMap: (f = msg.getHeadersMap()) ? f.toObject(includeInstance, undefined) : [],
    queriesList: jspb.Message.toObjectList(msg.getQueriesList(),
    proto.pluginv2.DataQuery.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pluginv2.QueryDataRequest}
 */
proto.pluginv2.QueryDataRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pluginv2.QueryDataRequest;
  return proto.pluginv2.QueryDataRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pluginv2.QueryDataRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pluginv2.QueryDataRequest}
 */
proto.pluginv2.QueryDataRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pluginv2.PluginContext;
      reader.readMessage(value,proto.pluginv2.PluginContext.deserializeBinaryFromReader);
      msg.setPlugincontext(value);
      break;
    case 2:
      var value = msg.getHeadersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    case 3:
      var value = new proto.pluginv2.DataQuery;
      reader.readMessage(value,proto.pluginv2.DataQuery.deserializeBinaryFromReader);
      msg.addQueries(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pluginv2.QueryDataRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pluginv2.QueryDataRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pluginv2.QueryDataRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pluginv2.QueryDataRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlugincontext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pluginv2.PluginContext.serializeBinaryToWriter
    );
  }
  f = message.getHeadersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getQueriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.pluginv2.DataQuery.serializeBinaryToWriter
    );
  }
};


/**
 * optional PluginContext pluginContext = 1;
 * @return {?proto.pluginv2.PluginContext}
 */
proto.pluginv2.QueryDataRequest.prototype.getPlugincontext = function() {
  return /** @type{?proto.pluginv2.PluginContext} */ (
    jspb.Message.getWrapperField(this, proto.pluginv2.PluginContext, 1));
};


/** @param {?proto.pluginv2.PluginContext|undefined} value */
proto.pluginv2.QueryDataRequest.prototype.setPlugincontext = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.pluginv2.QueryDataRequest.prototype.clearPlugincontext = function() {
  this.setPlugincontext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pluginv2.QueryDataRequest.prototype.hasPlugincontext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * map<string, string> headers = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.pluginv2.QueryDataRequest.prototype.getHeadersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


proto.pluginv2.QueryDataRequest.prototype.clearHeadersMap = function() {
  this.getHeadersMap().clear();
};


/**
 * repeated DataQuery queries = 3;
 * @return {!Array<!proto.pluginv2.DataQuery>}
 */
proto.pluginv2.QueryDataRequest.prototype.getQueriesList = function() {
  return /** @type{!Array<!proto.pluginv2.DataQuery>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pluginv2.DataQuery, 3));
};


/** @param {!Array<!proto.pluginv2.DataQuery>} value */
proto.pluginv2.QueryDataRequest.prototype.setQueriesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.pluginv2.DataQuery=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pluginv2.DataQuery}
 */
proto.pluginv2.QueryDataRequest.prototype.addQueries = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.pluginv2.DataQuery, opt_index);
};


proto.pluginv2.QueryDataRequest.prototype.clearQueriesList = function() {
  this.setQueriesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pluginv2.QueryDataResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pluginv2.QueryDataResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pluginv2.QueryDataResponse.displayName = 'proto.pluginv2.QueryDataResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pluginv2.QueryDataResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pluginv2.QueryDataResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pluginv2.QueryDataResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pluginv2.QueryDataResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    responsesMap: (f = msg.getResponsesMap()) ? f.toObject(includeInstance, proto.pluginv2.DataResponse.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pluginv2.QueryDataResponse}
 */
proto.pluginv2.QueryDataResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pluginv2.QueryDataResponse;
  return proto.pluginv2.QueryDataResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pluginv2.QueryDataResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pluginv2.QueryDataResponse}
 */
proto.pluginv2.QueryDataResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getResponsesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.pluginv2.DataResponse.deserializeBinaryFromReader, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pluginv2.QueryDataResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pluginv2.QueryDataResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pluginv2.QueryDataResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pluginv2.QueryDataResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponsesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.pluginv2.DataResponse.serializeBinaryToWriter);
  }
};


/**
 * map<string, DataResponse> responses = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.pluginv2.DataResponse>}
 */
proto.pluginv2.QueryDataResponse.prototype.getResponsesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.pluginv2.DataResponse>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.pluginv2.DataResponse));
};


proto.pluginv2.QueryDataResponse.prototype.clearResponsesMap = function() {
  this.getResponsesMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pluginv2.DataResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pluginv2.DataResponse.repeatedFields_, null);
};
goog.inherits(proto.pluginv2.DataResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pluginv2.DataResponse.displayName = 'proto.pluginv2.DataResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pluginv2.DataResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pluginv2.DataResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pluginv2.DataResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pluginv2.DataResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pluginv2.DataResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    framesList: msg.getFramesList_asB64(),
    error: jspb.Message.getFieldWithDefault(msg, 2, ""),
    jsonmeta: msg.getJsonmeta_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pluginv2.DataResponse}
 */
proto.pluginv2.DataResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pluginv2.DataResponse;
  return proto.pluginv2.DataResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pluginv2.DataResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pluginv2.DataResponse}
 */
proto.pluginv2.DataResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addFrames(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setJsonmeta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pluginv2.DataResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pluginv2.DataResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pluginv2.DataResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pluginv2.DataResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFramesList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getJsonmeta_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * repeated bytes frames = 1;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.pluginv2.DataResponse.prototype.getFramesList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * repeated bytes frames = 1;
 * This is a type-conversion wrapper around `getFramesList()`
 * @return {!Array<string>}
 */
proto.pluginv2.DataResponse.prototype.getFramesList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getFramesList()));
};


/**
 * repeated bytes frames = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFramesList()`
 * @return {!Array<!Uint8Array>}
 */
proto.pluginv2.DataResponse.prototype.getFramesList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getFramesList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.pluginv2.DataResponse.prototype.setFramesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.pluginv2.DataResponse.prototype.addFrames = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.pluginv2.DataResponse.prototype.clearFramesList = function() {
  this.setFramesList([]);
};


/**
 * optional string error = 2;
 * @return {string}
 */
proto.pluginv2.DataResponse.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.pluginv2.DataResponse.prototype.setError = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes jsonMeta = 3;
 * @return {!(string|Uint8Array)}
 */
proto.pluginv2.DataResponse.prototype.getJsonmeta = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes jsonMeta = 3;
 * This is a type-conversion wrapper around `getJsonmeta()`
 * @return {string}
 */
proto.pluginv2.DataResponse.prototype.getJsonmeta_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getJsonmeta()));
};


/**
 * optional bytes jsonMeta = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getJsonmeta()`
 * @return {!Uint8Array}
 */
proto.pluginv2.DataResponse.prototype.getJsonmeta_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getJsonmeta()));
};


/** @param {!(string|Uint8Array)} value */
proto.pluginv2.DataResponse.prototype.setJsonmeta = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pluginv2.CollectMetricsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pluginv2.CollectMetricsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pluginv2.CollectMetricsRequest.displayName = 'proto.pluginv2.CollectMetricsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pluginv2.CollectMetricsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pluginv2.CollectMetricsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pluginv2.CollectMetricsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pluginv2.CollectMetricsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    plugincontext: (f = msg.getPlugincontext()) && proto.pluginv2.PluginContext.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pluginv2.CollectMetricsRequest}
 */
proto.pluginv2.CollectMetricsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pluginv2.CollectMetricsRequest;
  return proto.pluginv2.CollectMetricsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pluginv2.CollectMetricsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pluginv2.CollectMetricsRequest}
 */
proto.pluginv2.CollectMetricsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pluginv2.PluginContext;
      reader.readMessage(value,proto.pluginv2.PluginContext.deserializeBinaryFromReader);
      msg.setPlugincontext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pluginv2.CollectMetricsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pluginv2.CollectMetricsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pluginv2.CollectMetricsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pluginv2.CollectMetricsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlugincontext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pluginv2.PluginContext.serializeBinaryToWriter
    );
  }
};


/**
 * optional PluginContext pluginContext = 1;
 * @return {?proto.pluginv2.PluginContext}
 */
proto.pluginv2.CollectMetricsRequest.prototype.getPlugincontext = function() {
  return /** @type{?proto.pluginv2.PluginContext} */ (
    jspb.Message.getWrapperField(this, proto.pluginv2.PluginContext, 1));
};


/** @param {?proto.pluginv2.PluginContext|undefined} value */
proto.pluginv2.CollectMetricsRequest.prototype.setPlugincontext = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.pluginv2.CollectMetricsRequest.prototype.clearPlugincontext = function() {
  this.setPlugincontext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pluginv2.CollectMetricsRequest.prototype.hasPlugincontext = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pluginv2.CollectMetricsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pluginv2.CollectMetricsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pluginv2.CollectMetricsResponse.displayName = 'proto.pluginv2.CollectMetricsResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pluginv2.CollectMetricsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pluginv2.CollectMetricsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pluginv2.CollectMetricsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pluginv2.CollectMetricsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    metrics: (f = msg.getMetrics()) && proto.pluginv2.CollectMetricsResponse.Payload.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pluginv2.CollectMetricsResponse}
 */
proto.pluginv2.CollectMetricsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pluginv2.CollectMetricsResponse;
  return proto.pluginv2.CollectMetricsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pluginv2.CollectMetricsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pluginv2.CollectMetricsResponse}
 */
proto.pluginv2.CollectMetricsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pluginv2.CollectMetricsResponse.Payload;
      reader.readMessage(value,proto.pluginv2.CollectMetricsResponse.Payload.deserializeBinaryFromReader);
      msg.setMetrics(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pluginv2.CollectMetricsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pluginv2.CollectMetricsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pluginv2.CollectMetricsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pluginv2.CollectMetricsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetrics();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pluginv2.CollectMetricsResponse.Payload.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pluginv2.CollectMetricsResponse.Payload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pluginv2.CollectMetricsResponse.Payload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pluginv2.CollectMetricsResponse.Payload.displayName = 'proto.pluginv2.CollectMetricsResponse.Payload';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pluginv2.CollectMetricsResponse.Payload.prototype.toObject = function(opt_includeInstance) {
  return proto.pluginv2.CollectMetricsResponse.Payload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pluginv2.CollectMetricsResponse.Payload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pluginv2.CollectMetricsResponse.Payload.toObject = function(includeInstance, msg) {
  var f, obj = {
    prometheus: msg.getPrometheus_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pluginv2.CollectMetricsResponse.Payload}
 */
proto.pluginv2.CollectMetricsResponse.Payload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pluginv2.CollectMetricsResponse.Payload;
  return proto.pluginv2.CollectMetricsResponse.Payload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pluginv2.CollectMetricsResponse.Payload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pluginv2.CollectMetricsResponse.Payload}
 */
proto.pluginv2.CollectMetricsResponse.Payload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPrometheus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pluginv2.CollectMetricsResponse.Payload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pluginv2.CollectMetricsResponse.Payload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pluginv2.CollectMetricsResponse.Payload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pluginv2.CollectMetricsResponse.Payload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrometheus_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes prometheus = 1;
 * @return {!(string|Uint8Array)}
 */
proto.pluginv2.CollectMetricsResponse.Payload.prototype.getPrometheus = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes prometheus = 1;
 * This is a type-conversion wrapper around `getPrometheus()`
 * @return {string}
 */
proto.pluginv2.CollectMetricsResponse.Payload.prototype.getPrometheus_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPrometheus()));
};


/**
 * optional bytes prometheus = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPrometheus()`
 * @return {!Uint8Array}
 */
proto.pluginv2.CollectMetricsResponse.Payload.prototype.getPrometheus_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPrometheus()));
};


/** @param {!(string|Uint8Array)} value */
proto.pluginv2.CollectMetricsResponse.Payload.prototype.setPrometheus = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional Payload metrics = 1;
 * @return {?proto.pluginv2.CollectMetricsResponse.Payload}
 */
proto.pluginv2.CollectMetricsResponse.prototype.getMetrics = function() {
  return /** @type{?proto.pluginv2.CollectMetricsResponse.Payload} */ (
    jspb.Message.getWrapperField(this, proto.pluginv2.CollectMetricsResponse.Payload, 1));
};


/** @param {?proto.pluginv2.CollectMetricsResponse.Payload|undefined} value */
proto.pluginv2.CollectMetricsResponse.prototype.setMetrics = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.pluginv2.CollectMetricsResponse.prototype.clearMetrics = function() {
  this.setMetrics(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pluginv2.CollectMetricsResponse.prototype.hasMetrics = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pluginv2.CheckHealthRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pluginv2.CheckHealthRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pluginv2.CheckHealthRequest.displayName = 'proto.pluginv2.CheckHealthRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pluginv2.CheckHealthRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pluginv2.CheckHealthRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pluginv2.CheckHealthRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pluginv2.CheckHealthRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    plugincontext: (f = msg.getPlugincontext()) && proto.pluginv2.PluginContext.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pluginv2.CheckHealthRequest}
 */
proto.pluginv2.CheckHealthRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pluginv2.CheckHealthRequest;
  return proto.pluginv2.CheckHealthRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pluginv2.CheckHealthRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pluginv2.CheckHealthRequest}
 */
proto.pluginv2.CheckHealthRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pluginv2.PluginContext;
      reader.readMessage(value,proto.pluginv2.PluginContext.deserializeBinaryFromReader);
      msg.setPlugincontext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pluginv2.CheckHealthRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pluginv2.CheckHealthRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pluginv2.CheckHealthRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pluginv2.CheckHealthRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlugincontext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pluginv2.PluginContext.serializeBinaryToWriter
    );
  }
};


/**
 * optional PluginContext pluginContext = 1;
 * @return {?proto.pluginv2.PluginContext}
 */
proto.pluginv2.CheckHealthRequest.prototype.getPlugincontext = function() {
  return /** @type{?proto.pluginv2.PluginContext} */ (
    jspb.Message.getWrapperField(this, proto.pluginv2.PluginContext, 1));
};


/** @param {?proto.pluginv2.PluginContext|undefined} value */
proto.pluginv2.CheckHealthRequest.prototype.setPlugincontext = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.pluginv2.CheckHealthRequest.prototype.clearPlugincontext = function() {
  this.setPlugincontext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pluginv2.CheckHealthRequest.prototype.hasPlugincontext = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pluginv2.CheckHealthResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pluginv2.CheckHealthResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pluginv2.CheckHealthResponse.displayName = 'proto.pluginv2.CheckHealthResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pluginv2.CheckHealthResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pluginv2.CheckHealthResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pluginv2.CheckHealthResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pluginv2.CheckHealthResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, ""),
    jsondetails: msg.getJsondetails_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pluginv2.CheckHealthResponse}
 */
proto.pluginv2.CheckHealthResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pluginv2.CheckHealthResponse;
  return proto.pluginv2.CheckHealthResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pluginv2.CheckHealthResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pluginv2.CheckHealthResponse}
 */
proto.pluginv2.CheckHealthResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.pluginv2.CheckHealthResponse.HealthStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setJsondetails(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pluginv2.CheckHealthResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pluginv2.CheckHealthResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pluginv2.CheckHealthResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pluginv2.CheckHealthResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getJsondetails_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.pluginv2.CheckHealthResponse.HealthStatus = {
  UNKNOWN: 0,
  OK: 1,
  ERROR: 2
};

/**
 * optional HealthStatus status = 1;
 * @return {!proto.pluginv2.CheckHealthResponse.HealthStatus}
 */
proto.pluginv2.CheckHealthResponse.prototype.getStatus = function() {
  return /** @type {!proto.pluginv2.CheckHealthResponse.HealthStatus} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.pluginv2.CheckHealthResponse.HealthStatus} value */
proto.pluginv2.CheckHealthResponse.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.pluginv2.CheckHealthResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.pluginv2.CheckHealthResponse.prototype.setMessage = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes jsonDetails = 3;
 * @return {!(string|Uint8Array)}
 */
proto.pluginv2.CheckHealthResponse.prototype.getJsondetails = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes jsonDetails = 3;
 * This is a type-conversion wrapper around `getJsondetails()`
 * @return {string}
 */
proto.pluginv2.CheckHealthResponse.prototype.getJsondetails_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getJsondetails()));
};


/**
 * optional bytes jsonDetails = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getJsondetails()`
 * @return {!Uint8Array}
 */
proto.pluginv2.CheckHealthResponse.prototype.getJsondetails_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getJsondetails()));
};


/** @param {!(string|Uint8Array)} value */
proto.pluginv2.CheckHealthResponse.prototype.setJsondetails = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


goog.object.extend(exports, proto.pluginv2);
